generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id        Int      @id @default(autoincrement())
  first_name     String?
  last_name      String?
  email          String   @unique
  password       String?
  googleId       String?  @unique
  phone_number   String?
  avatarFilename String?  @default("avatarempty.jpg")
  is_verified    Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relation with UserAddress model
  addresses UserAddress[] // A user can have multiple addresses
  orders    Order[]
}

model UserAddress {
  user_address_id Int      @id @default(autoincrement())
  user_id         Int
  is_primary      Boolean
  name            String
  street_address  String
  city            String
  province        String
  postal_code     String
  latitude        Decimal  @db.Decimal(11, 7)
  longitude       Decimal  @db.Decimal(11, 7)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relation with User model
  user   User    @relation(fields: [user_id], references: [user_id])
  // Relation with Order model (One UserAddress can have multiple Orders)
  orders Order[]

  @@index([user_id])
}

model Order {
  order_id        Int         @id @default(autoincrement())
  transaction_id  String      @unique
  customer_id     Int
  user_address_id Int
  outlet_id       Int
  driver_id       Int
  status          String
  total_weight    Float
  total_cost      Float
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  OrderItems      OrderItem[]
  Payments        Payment[]
  UserAddress     UserAddress @relation(fields: [user_address_id], references: [user_address_id])
  Customer        User        @relation(fields: [customer_id], references: [user_id])
  Driver          Agent       @relation(fields: [driver_id], references: [agent_id], name: "DriverRelation")
  Outlet          Outlet      @relation(fields: [outlet_id], references: [outlet_id])
}

model OrderItem {
  order_item_id Int       @id @default(autoincrement())
  order_id      Int
  item_id       Int
  quantity      Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  Order         Order     @relation(fields: [order_id], references: [order_id])
  WorkLogs      WorkLog[]
}

model Payment {
  payment_id     Int      @id @default(autoincrement())
  invoice_id     String   @unique
  order_id       Int
  payment_method String
  payment_status String
  amount         Float
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  Order Order @relation(fields: [order_id], references: [order_id])
}

model Agent {
  agent_id     Int     @id @default(autoincrement())
  username     String  @unique
  password     String
  first_name   String
  last_name    String
  phone_number String?
  role_id      Int
  role         Role    @relation(fields: [role_id], references: [role_id])

  outlet_id Int?

  // Pastikan setiap relasi menggunakan nama relasi dan constraint yang unik
  outlet_worker Outlet? @relation(fields: [outlet_id], references: [outlet_id], name: "WorkerRelation", map: "Worker_outlet_id_fkey")
  outlet_admin  Outlet? @relation(fields: [outlet_id], references: [outlet_id], name: "AdminRelation", map: "Admin_outlet_id_fkey")
  outlet_driver Outlet? @relation(fields: [outlet_id], references: [outlet_id], name: "DriverRelation", map: "Driver_outlet_id_fkey")

  // Relation for Driver Orders
  driverOrders Order[] @relation("DriverRelation") // Relasi kebalikan untuk Driver

  worker_type WorkerType?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  WorkLogs WorkLog[]
  Shifts   Shift[]

  @@index([role_id])
  @@index([outlet_id])
}

enum WorkerType {
  WASHING
  IRONING
  PACKING
}

model Role {
  role_id Int     @id @default(autoincrement())
  name    String  @unique
  agents  Agent[]
}

model Outlet {
  outlet_id Int     @id @default(autoincrement())
  name      String
  location  String
  latitude  Decimal @db.Decimal(11, 7)
  longitude Decimal @db.Decimal(11, 7)

  orders Order[]

  // Setiap relasi di sini akan menggunakan nama relasi yang unik
  workers Agent[] @relation("WorkerRelation")
  admins  Agent[] @relation("AdminRelation")
  drivers Agent[] @relation("DriverRelation")

  shifts Shift[]
}

model WorkLog {
  work_log_id   Int        @id @default(autoincrement())
  order_item_id Int
  agent_id      Int
  worker_type   WorkerType // Tipe worker (WASHING, IRONING, PACKING)
  quantity      Int // Kuantitas item yang diinput ulang oleh worker
  created_at    DateTime   @default(now())

  agent      Agent     @relation(fields: [agent_id], references: [agent_id])
  order_item OrderItem @relation(fields: [order_item_id], references: [order_item_id])

  @@index([agent_id])
  @@index([order_item_id])
}

model Shift {
  shift_id   Int      @id @default(autoincrement())
  agent_id   Int
  outlet_id  Int
  start_time DateTime
  end_time   DateTime
  active     Boolean  @default(false) // Menandakan apakah shift sedang aktif

  agent  Agent  @relation(fields: [agent_id], references: [agent_id])
  outlet Outlet @relation(fields: [outlet_id], references: [outlet_id])

  @@index([agent_id])
  @@index([outlet_id])
}
