// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Driver
  Customer
  SuperAdmin
  OutletAdmin
  WashingWorker
  IroningWorker
  PackingWorker
}

model User {
  user_id     String   @id @default(cuid())
  fullname    String
  email       String   @unique
  phone       String
  role        Role     @default(Customer)
  password    String?
  google_id   String?
  avatar_url  String?
  is_verified Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Customer Customer?
  Employee Employee?
  Order    Order[]
  Ticket   Ticket[]

  @@map("users")
}

model Customer {
  customer_id String @id @default(cuid())
  user_id     String @unique

  User           User             @relation(fields: [user_id], references: [user_id])
  CustomerAdress CustomerAdress[]

  @@map("customers")
}

model CustomerAdress {
  customer_address_id String   @id @default(cuid())
  customer_id         String
  is_primary          Boolean  @default(false)
  name                String   @default("Home")
  address             String
  formatted           String?
  road                String?
  city                String?
  city_district       String?
  region              String?
  suburb              String?
  zipcode             String?
  latitude            Decimal  @db.Decimal(11, 7)
  longitude           Decimal  @db.Decimal(11, 7)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  Customer Customer @relation(fields: [customer_id], references: [customer_id])

  @@map("customer_addresses")
}

model Outlet {
  outlet_id     String   @id @default(cuid())
  name          String
  description   String
  address       String
  formatted     String?
  road          String?
  city          String?
  city_district String?
  region        String?
  suburb        String?
  zipcode       String?
  latitude      Decimal  @db.Decimal(11, 7)
  longitude     Decimal  @db.Decimal(11, 7)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  Employee      Employee[]
  Delivery      Delivery[]
  Order         Order[]
  Job           Job[]
  Resolution    Resolution[]
  RequestAccess RequestAccess[]

  @@map("outlets")
}

model Shift {
  shift_id   String   @id @default(cuid())
  start      Int
  end        Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Employee Employee[]

  @@map("shifts")
}

model Employee {
  employee_id String   @id @default(cuid())
  user_id     String   @unique
  outlet_id   String?
  shift_id    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  User          User            @relation(fields: [user_id], references: [user_id])
  Outlet        Outlet?         @relation(fields: [outlet_id], references: [outlet_id])
  Shift         Shift?          @relation(fields: [shift_id], references: [shift_id])
  Resolution    Resolution[]
  RequestAccess RequestAccess[]

  @@map("employees")
}

model Order {
  order_id   String   @id @default(cuid())
  outlet_id  String
  user_id    String
  price      Decimal  @db.Decimal(8, 2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User          User            @relation(fields: [user_id], references: [user_id])
  Outlet        Outlet          @relation(fields: [outlet_id], references: [outlet_id])
  OrderItem     OrderItem[]
  OrderProgress OrderProgress[]
  Payment       Payment[]
  Ticket        Ticket[]
  Delivery      Delivery[]
  Job           Job[]

  @@map("orders")
}

enum PaymentStatus {
  Pending
  Paid
  Cancelled
  Refunded
}

model Payment {
  payment_id String        @id @default(cuid())
  order_id   String
  method     String
  amount     Decimal       @db.Decimal(8, 2)
  status     PaymentStatus @default(Pending)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  Order Order @relation(fields: [order_id], references: [order_id])

  @@map("payments")
}

model LaundryItem {
  laundry_item_id String   @id @default(cuid())
  name            String
  icon_url        String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  OrderItem OrderItem[]

  @@map("laundry_items")
}

model OrderItem {
  order_item_id   String  @id @default(cuid())
  order_id        String
  laundry_item_id String
  quantity        Int
  weight          Decimal @db.Decimal(8, 2)

  Order       Order       @relation(fields: [order_id], references: [order_id])
  LaundryItem LaundryItem @relation(fields: [laundry_item_id], references: [laundry_item_id])

  @@map("order_items")
}

model OrderProgress {
  order_progrses_id String   @id @default(cuid())
  order_id          String
  name              String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  Order Order @relation(fields: [order_id], references: [order_id])

  @@map("order_progresses")
}

enum ProgressType {
  Pending
  Ongoing
  Completed
}

enum DeliveryType {
  Pickup
  Dropoff
}

model Delivery {
  delivery_id String       @id @default(cuid())
  order_id    String
  outlet_id   String
  progress    ProgressType @default(Pending)
  type        DeliveryType
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  Outlet Outlet @relation(fields: [outlet_id], references: [outlet_id])
  Order  Order  @relation(fields: [order_id], references: [order_id])

  @@map("deliveries")
}

enum JobType {
  Washing
  Ironing
  Packing
}

model Job {
  job_id     String       @id @default(cuid())
  outlet_id  String
  order_id   String
  progress   ProgressType @default(Pending)
  type       JobType
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  Outlet Outlet @relation(fields: [outlet_id], references: [outlet_id])
  Order  Order  @relation(fields: [order_id], references: [order_id])

  @@map("jobs")
}

model Ticket {
  ticket_id  String   @id @default(cuid())
  order_id   String
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Order      Order        @relation(fields: [order_id], references: [order_id])
  User       User         @relation(fields: [user_id], references: [user_id])
  Resolution Resolution[]

  @@map("tickets")
}

model Resolution {
  resolution_id String   @id @default(cuid())
  outlet_id     String
  employee_id   String
  description   String
  ticket_id     String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  Ticket   Ticket   @relation(fields: [ticket_id], references: [ticket_id])
  Outlet   Outlet   @relation(fields: [outlet_id], references: [outlet_id])
  Employee Employee @relation(fields: [employee_id], references: [employee_id])

  @@map("resolutions")
}

enum RequestStatus {
  Pending
  Accepted
  Rejected
}

model RequestAccess {
  request_access_id String        @id @default(cuid())
  outlet_id         String
  employee_id       String
  status            RequestStatus @default(Pending)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  Outlet   Outlet   @relation(fields: [outlet_id], references: [outlet_id])
  Employee Employee @relation(fields: [employee_id], references: [employee_id])

  @@map("request_access")
}

model Agent {
  agent_id     Int     @id @default(autoincrement())
  username     String  @unique
  password     String
  first_name   String
  last_name    String
  phone_number String?
  role_id      Int
  role         Role    @relation(fields: [role_id], references: [role_id])

  outlet_id Int?

  // Pastikan setiap relasi menggunakan nama relasi dan constraint yang unik
  outlet_worker Outlet? @relation(fields: [outlet_id], references: [outlet_id], name: "WorkerRelation", map: "Worker_outlet_id_fkey")
  outlet_admin  Outlet? @relation(fields: [outlet_id], references: [outlet_id], name: "AdminRelation", map: "Admin_outlet_id_fkey")
  outlet_driver Outlet? @relation(fields: [outlet_id], references: [outlet_id], name: "DriverRelation", map: "Driver_outlet_id_fkey")

  // Relation for Driver Orders
  driverOrders Order[] @relation("DriverRelation") // Relasi kebalikan untuk Driver

  worker_type WorkerType?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  WorkLogs WorkLog[]
  Shifts   Shift[]

  @@index([role_id])
  @@index([outlet_id])
}

enum WorkerType {
  WASHING
  IRONING
  PACKING
}

model Role {
  role_id Int     @id @default(autoincrement())
  name    String  @unique
  agents  Agent[]
}

model Outlet {
  outlet_id Int     @id @default(autoincrement())
  name      String
  location  String
  latitude  Decimal @db.Decimal(11, 7)
  longitude Decimal @db.Decimal(11, 7)

  orders Order[]

  // Setiap relasi di sini akan menggunakan nama relasi yang unik
  workers Agent[] @relation("WorkerRelation")
  admins  Agent[] @relation("AdminRelation")
  drivers Agent[] @relation("DriverRelation")

  shifts Shift[]
}

model WorkLog {
  work_log_id   Int        @id @default(autoincrement())
  order_item_id Int
  agent_id      Int
  worker_type   WorkerType // Tipe worker (WASHING, IRONING, PACKING)
  quantity      Int // Kuantitas item yang diinput ulang oleh worker
  created_at    DateTime   @default(now())

  agent      Agent     @relation(fields: [agent_id], references: [agent_id])
  order_item OrderItem @relation(fields: [order_item_id], references: [order_item_id])

  @@index([agent_id])
  @@index([order_item_id])
}

model Shift {
  shift_id   Int      @id @default(autoincrement())
  agent_id   Int
  outlet_id  Int
  start_time DateTime
  end_time   DateTime
  active     Boolean  @default(false) // Menandakan apakah shift sedang aktif

  agent  Agent  @relation(fields: [agent_id], references: [agent_id])
  outlet Outlet @relation(fields: [outlet_id], references: [outlet_id])

  @@index([agent_id])
  @@index([outlet_id])
}
